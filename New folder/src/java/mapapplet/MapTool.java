/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mapapplet;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.Random;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JToggleButton;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author orcl
 */
public class MapTool extends javax.swing.JApplet {

    /**
     * Initializes the applet MapTool
     */
    static MapTool instance;
    JScrollPane imageScrollPane;
    DoorDetailsForm doorDetailsForm;
    HashMap< String, DoorButton> doors = new HashMap<>();
    HashMap< Integer, SlotButton> slots = new HashMap<>();
    HashMap< String, PointButton> paths = new HashMap<>();
    JLabel image = new JLabel();
    JLabel doorName = new JLabel();
    JLabel currentSlotId = new JLabel();
    JPanel centerPanel = new JPanel();
    DoorButton currentDoor;
    SlotButton currentSlot;
    PointButton currentPoint;
    int status = 1;

    public void init() {
        try {
            instance = this;

          //  doorDetailsForm = new DoorDetailsForm(MapTool.instance);
            this.setSize(900, 900);
            this.setLayout(null);
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                    initializeMenue();
                    loadImage();
                    fireMyListener();
                    loadMapAndDetails();
                    addMyComponents();



                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        centerPanel.setBackground(new Color(0, 0, 0));
    }// </editor-fold>                        
    // Variables declaration - do not modify                     
    // End of variables declaration                   

    private void loadMapAndDetails() {
    }

    private void addMyComponents() {
    }

    private void initializeMenue() {

        JPanel menue = new JPanel();

        ButtonGroup pathButtonGroup = new ButtonGroup();
        JToggleButton pathToggleButton = new JToggleButton("Initiate Path");

        menue.add(pathToggleButton);



        pathToggleButton.addChangeListener(new ChangePathListener());
        ;
        menue.add(new JLabel("Current Door is : "));
        menue.add(doorName);
        menue.add(new JLabel("Current Slot is : "));
        menue.add(currentSlotId);

//        this.add(menue, BorderLayout.SOUTH);
        centerPanel.setLayout(null);
        centerPanel.setBounds(0, 0, 1000, 1000);
        // centerPanel.add(image);
        centerPanel.setBackground(new Color(0, 0, 0, .1f));


        // this.add(centerPanel);





    }

    private void loadImage() {
        try {

            image.setIcon(new ImageIcon(getClass().getResource("garage.jpg")));
            imageScrollPane = new JScrollPane(image);
            Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
            imageScrollPane.setBounds(0, 0, (int) screenSize.getWidth(), (int) screenSize.getHeight());
            //  this.add(imageScrollPane);
            JLabel jLabel = new JLabel("xxxxxxxxxxxxx");
            jLabel.setForeground(Color.red);
            jLabel.setBounds(0, 0, 100, 100);
            imageScrollPane.addMouseListener(new MyFormMouseAdapter());
            this.add(centerPanel);

            centerPanel.add(imageScrollPane);

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    public void setImage(JLabel image) {
        this.image = image;
    }

    public JLabel getImage() {
        return image;
    }

    void handleThisDoor(DoorButton door) {
        if (doors.get(door.getDoorName().toUpperCase()) != null) {
            JOptionPane.showMessageDialog(null, "sorry this door name is already added");
            return;
        }

        doors.put(door.getDoorName().toUpperCase(), door);

        door.addMouseListener(new ElementMouseListener());
        door.addKeyListener(new ButtonKeyListener());
        door.addActionListener(new ButtonActionListener());
        doorName.setText(door.getDoorName());
        door.setSize(90, 30);
        centerPanel.remove(imageScrollPane);
        centerPanel.add(door);
        centerPanel.add(imageScrollPane);
        currentDoor = door;

        SwingUtilities.updateComponentTreeUI(centerPanel);


    }

    private void fireMyListener() {
        centerPanel.addMouseListener(new MyFormMouseAdapter());
    }

    class AddDoorActionListener
            implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            // String dialog = JOptionPane.showInputDialog(null, "Please enter door name");
            doorDetailsForm.setVisible(true);

        }
    }

    class ChangePathListener
            implements ChangeListener {

        public void stateChanged(ChangeEvent e) {
            JToggleButton currentToggleButton = ((JToggleButton) e.getSource());
            if (currentToggleButton.getText().equals("Initiate Path")) {
                currentToggleButton.setText("End Path");
            } else {
                currentToggleButton.setText("Initiate Path");

            }
        }
    }

    //content offset
    
    class ElementMouseListener extends MouseAdapter {

        @Override
        public void mouseReleased(MouseEvent e) {
            centerPanel.remove(imageScrollPane);
            if (e.isControlDown()) 
            {
                ((JButton) e.getSource()).setLocation(e.getXOnScreen(), e.getYOnScreen() - 40);
            }
            centerPanel.add(imageScrollPane);
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            centerPanel.remove(imageScrollPane);
            if (e.getSource() instanceof DoorButton) {
                doorName.setText(((DoorButton) e.getSource()).getDoorName());
                currentDoor = (DoorButton) e.getSource();
            } else if (e.getSource() instanceof SlotButton) {
                currentSlotId.setText(((SlotButton) e.getSource()).getSlotId() + "");
                currentSlot = (SlotButton) e.getSource();

            } else if (e.getSource() instanceof PointButton) {
                currentPoint = (PointButton) e.getSource();

            }
            centerPanel.add(imageScrollPane);
        }
    }

    class MyFormMouseAdapter extends MouseAdapter {

        @Override
        public void mouseClicked(MouseEvent e) {
            centerPanel.remove(imageScrollPane);
            if (e.isControlDown()) {
                doorDetailsForm.setCurrentPoint(e.getPoint());
                doorDetailsForm.setVisible(true);

            } else if (e.isAltDown()) {
                String result = JOptionPane.showInputDialog(null, "please enter slot id");
                if (result != null) {
                    if (isNumeric(result)) {
                        if (slots.get(Integer.parseInt(result)) != null) {
                            JOptionPane.showMessageDialog(null, "Sorry this slot id is already exist please choose another one");
                            centerPanel.add(imageScrollPane);

                            return;
                        }
                        SlotButton slotButton = prepareSlotButton(result, e);
                        slotButton.setSlotId(Integer.parseInt(result));
                        slotButton.setIcon(new ImageIcon(getClass().getResource("slotIcon.png")));
                        slotButton.addActionListener(new ButtonActionListener());
                        currentSlotId.setText(result);
                        centerPanel.add(slotButton);
                        SwingUtilities.updateComponentTreeUI(centerPanel);
                        slots.put(Integer.parseInt(result), slotButton);
                        currentSlot = slotButton;

                    } else {
                        System.out.println("not number");

                    }
                }
            } else {

                if (currentDoor == null || currentSlot == null) {

                    JOptionPane.showMessageDialog(null, "Please add  door and slot then you can add path between them");
                    return;
                }

                PointButton tempPointButton = paths.get(currentDoor.getDoorName() + "-" + currentSlot.getSlotId());
                if (tempPointButton != null) 
                {
                    PointButton pointButton = preparePointButton(e, tempPointButton.getColor());
                    addComponent(centerPanel, pointButton);
                } else {
                    Color tempColor = createRandomColor();
                    PointButton pointButton = preparePointButton(e, tempColor);
                    paths.put((currentDoor.getDoorName() + "-" + currentSlot.getSlotId()), pointButton);
                    addComponent(centerPanel, pointButton);
                }
            }

            centerPanel.add(imageScrollPane);


        }

        public boolean isNumeric(String s) {
            return (s.matches("[+]?\\d+") && s.length() < 6);
        }

        private SlotButton prepareSlotButton(String result, MouseEvent e) {
            SlotButton slotButton = new SlotButton();
            slotButton.setText(result + "");
            slotButton.setSlotId(Integer.parseInt(result));
            slotButton.setBounds((int)e.getPoint().getX(),(int) e.getPoint().getY(), 50, 30);
            slotButton.addMouseListener(new ElementMouseListener());
            slotButton.addMouseMotionListener(new ElementMouseListener());
            slotButton.addKeyListener(new ButtonKeyListener());
            return slotButton;
        }

        private void updatePointName(PointButton pointButton, MouseEvent e) {
            pointButton.setText(String.format("(%d,%d)", e.getX(), e.getY()));
        }

        private void addComponent(JPanel centerPanel, PointButton pointButton) {
            centerPanel.add(pointButton);
            centerPanel.updateUI();
        }

        private PointButton preparePointButton(MouseEvent e, Color c) {
            PointButton pointButton = new PointButton(currentDoor.getDoorName()+"-"+Integer.parseInt(currentSlotId.getText()), c);
            pointButton.addMouseListener(new ElementMouseListener());
            pointButton.addMouseMotionListener(new ElementMouseListener());
            pointButton.addKeyListener(new ButtonKeyListener());
            pointButton.setBounds((int)e.getPoint().getX(), (int)e.getPoint().getY(), 60, 20);
            updatePointName(pointButton, e);
            pointButton.setForeground(c);

            return pointButton;

        }

        private Color createRandomColor() {
            Random rand = new Random();
            return new Color(rand.nextInt(255), rand.nextInt(255), rand.nextInt(255));
        }
    }

    class ButtonKeyListener extends KeyAdapter
    {

        @Override
        public void keyReleased(KeyEvent e) {

            if (e.getKeyCode() == KeyEvent.VK_DELETE) {
                try {
                    centerPanel.remove((Component) e.getSource());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                SwingUtilities.updateComponentTreeUI(centerPanel);
            }
        }
    }

    class ButtonActionListener implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() instanceof DoorButton) {
                doorName.setText(((DoorButton) e.getSource()).getDoorName());
                currentDoor = (DoorButton) e.getSource();
            } else if (e.getSource() instanceof SlotButton) {
                currentSlotId.setText(((SlotButton) e.getSource()).getSlotId() + "");
                currentSlot = (SlotButton) e.getSource();

            }
        }
    }
}
